TITLE    S&MAG_ADD
PAGE     50,100
N1OFF=	0H
N2OFF=	100H
RESOFF=	200H
SPCH=	250H
ASSUME  CS:CODE_S,SS:STACK_S
STACK_S	SEGMENT	'STACK'
DB	64	DUP(?)
STACK_S	ENDS
CODE_S	SEGMENT	'CODE'
MAIN	PROC	FAR
	PUSH DS
	MOV AX,0
	PUSH AX
	MOV SI,N1OFF
	MOV DI,N2OFF
	MOV BX,RESOFF
	MOV AL,[SI+7]
	XOR AL,[DI+7]
	AND AL,80H
	MOV CX,[SI+6]
	MOV DX,[DI+6]
	AND CX,7FFFH
	AND DX,7FFFH
	RCL AL,1
	JC SU
	MOV AX,[SI]		;IF SIGNS R EQUAL
	ADD AX,[DI]
	MOV [BX],AX
	MOV AX,[SI+2]
	ADC AX,[DI+2]
	MOV [BX+2],AX
	MOV AX,[SI+4]
	ADC AX,[DI+4]
	MOV [BX+4],AX
	MOV AX,CX
	ADC AX,DX
	MOV [BX+6],AX
	RCL AX,1
	MOV DI,SPCH
	JC OVER
	MOV AL,[SI+7]
	AND AL,80H
	ADD [BX+7],AL
	MOV BYTE PTR [DI],00H
	JMP FINISH
OVER:	MOV BYTE PTR [DI],0FFH
	JMP FINISH
SU:	MOV AX,CX	;ALWAYS UNSIGNED GREATER- LESS INTORDUCE SIGN OF GREATER
	CMP AX,DX
	JB XCH
	JMP OPER
XCH:	XCHG CX,DX
	XCHG SI,DI	
OPER:	MOV AX,[SI]	
	SUB AX,[DI]
	MOV [BX],AX
	MOV AX,[SI+2]
	SBB AX,[DI+2]
	MOV [BX+2],AX
	MOV AX,[SI+4]
	SBB AX,[DI+4]
	MOV [BX+4],AX
	MOV AX,CX
	SBB AX,DX
	MOV [BX+6],AX
	MOV AL,[SI+7]
	AND AL,80H
	ADD [BX+7],AL
	MOV DI,SPCH
	MOV BYTE PTR [DI],0
FINISH:	RET
MAIN	ENDP
CODE_S	ENDS
END	MAIN